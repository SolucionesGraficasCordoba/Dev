<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TextBox2.Text" xml:space="preserve">
    <value>El formulario de ORDEN DE TRABAJO se carga de la siguiente manera:

-	BOTON BUSCAR VENDEDOR (está al lado del campo vendedor): abre el formulario de vendedores,
                del listado se seleccionará (doble clic) su nombre. Éste se cargará en el campo asignado al vendedor.
-	BOTON BUSCAR CLIENTE (está al lado del campo cliente): abre el formulario de clientes,
                del listado se seleccionará (doble clic) su nombre. Éste se cargará en el campo asignado al Cliente.
-	BOTON GUARDAR: guarda la información cargada. 
-	BOTON CANCELAR: cierra el formulario sin guardar los cambios.  
-	CAMPO NRO ORDEN: Carga el número de odt. 
-	COMBO DIRECCION DE ENTREGA: Dirección a la que será entregado el trabajo.
-	CAMPO FECHA INGRESO: fecha de carga de la odt.
-	CAMPO FECHA ENTREGA: fecha de entrega de la odt.
-	CAMPO OBSERVACIONES: comentarios que se creen importantes de destacar.
-	CHECK’S TIPO ORDEN: tipo de orden que se cargará.
-	CAMPO CANTIDAD PRODUCTO: cantidad del producto a realizar.
-	COMBO PIEZA PRODUCTO: producto que se va a realizar.
-	CAMPO TAMAÑO PRODUCTO: tamaño del producto a realizar.
-	CAMPO PAPEL 1, 2, 3: Tipo de papel a utilizar.
-	CAMPO GRAMAJE 1, 2,3: grosor del papel.
-	CAMPO CANTIDAD 1, 2 ,3 PLIEGO ENTERO PRODUCTO: cantidad de pliego entero.
-	COMBO 1, 2, 3 FORMATO PLIEGO ENTERO PRODUCTO: formato pliego entero.
-	COMBO TIPO IMPRESIÓN OFFSET: tipo de impresión a realizar.
-	COMBO MODO IMPRESIÓN OFFSET: modo de impresión a realizar.
-	COMBO IMPRESORA OFFSET: impresora a utilizar.
-	COMBO MARCA OFFSET: marca de la impresora a utilizar.
-	CAMPO CANTIDAD 1, 2, 3 PLIEGO MAQUINA OFFSET: cantidad de pliegos máquina de offset.
-	COMBO FORMATO 1, 2, 3 PLIEGO MAQUINA OFFSET: formato de pliegos máquina de offset.
-	CAMPO CHAPAS 1, 2, 3: cantidad de chapas.
-	COMBO TIPO IMPRESIÓN DIGITAL: tipo de impresión a realizar.
-	CAMPO CANTIDAD 1, 2, 3 PLIEGO MAQUINA DIGITAL: cantidad pliego maquina digital.
-	COMBO FORMATO 1, 2, 3 PLIEGO MAQUINA DIGITAL: formato de pliego maquina digital.
-	CAMPO DATO VARIABLE: comentarios que se creen importantes de destacar sobre dato variable realizado.
-	CAMPO CANTIDAD GRAN FORMATO: cantidad de trabajo a realizar en gran formato.
-	COMBO PIEZA GRAN FORMATO: pieza a trabajar en gran formato.
-	CAMPO TAMAÑO GRAN FORMATO: tamaño a realizar en gran formato.
-	COMBO CALIDAD GRAN FORMATO: calidad de impresión a realizar.
-	COMBO SISTEMA GRAN FORMATO: sistema de impresión a realizar.
-	CHECK’S TERMINACION: tipo de terminaciones.
-	CAMPO DESCRIPCION TERMINACION: comentarios que se creen importantes de destacar para terminación.</value>
  </data>
  <data name="TextBox1.Text" xml:space="preserve">
    <value>
El formulario de TAREA se carga de la siguiente manera:

-	BOTON COLABORADOR (está al lado del campo colaborador): abre el formulario de colaboradores, 
                del listado se seleccionara (doble clic) su nombre. 
-	CAMPO FECHA: día que se guardará la o las  tareas realizadas.
-	CAMPO ENTRADA: horario de entrada a la planta.
-	CAMPO SALIDA: horario de salida de la planta.
-	CAMPO CARGA HORARIA: cantidad (en minutos) del tiempo transcurrido dentro de la planta. 
                Este campo es automático. (no debe llenarse).
-	BOTON LIMPIAR: limpia o vacía cada uno de los campos de la fila (por ej. de la tarea 2). 
-	CAMPO TAREA: la tarea o trabajo que se les ha asignado.
-	CAMPO TIEMPO ESTIMADO: tiempo aproximado de trabajo asignado a esa tarea.
-	CAMPO TIEMPO REAL: tiempo que le llevo la realización de la tarea. (obligatorio).
-	CAMPO OBSERVACIONES: comentario o alguna información extra que sea importante con relación a esa tarea.
-	BOTON ODT (está al lado del campo ot): abre el formulario de las órdenes, del listado se seleccionara (doble clic) 
                la orden relacionada a la tarea que se les asigno. 
-	BOTON GUARDAR: guarda la información cargada. 
-	BOTON CANCELAR: cierra el formulario sin guardar los cambios.</value>
  </data>
</root>